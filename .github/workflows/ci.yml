name: CI/CD Pipeline

# トリガー設定
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# 環境変数
env:
  NODE_VERSION: '22'
  VITE_ALPHA_VANTAGE_API_KEY: 'demo'

jobs:
  # Lint & Type Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npm run typecheck

  # Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['22', '24']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test:run
        
      - name: Generate test coverage
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == '22'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build Test
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Debug working directory
        run: |
          pwd
          ls -la
          ls -la index.html || echo "index.html not found"
          cat vite.config.ts
        
      - name: Build application
        run: npm run build
        
      - name: Test production build
        run: npm run preview &
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

  # Dependency Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate

  # Performance Test (E2E基本テスト)
  e2e-basic:
    name: E2E Basic Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Start preview server
        run: |
          npm run preview &
          sleep 5
          
      - name: Basic health check
        run: |
          curl -f http://localhost:4173 || exit 1
          echo "✅ Application is responding"

  # Test Result Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security, e2e-basic]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Basic | ${{ needs.e2e-basic.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.e2e-basic.result }}" == "success" ]]; then
            echo "🎉 **All checks passed!** Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi